

Функция ПолучитьХМЛ(title, cateory_vip, phone_manager)	
	Стр = "<?xml version=""1.0""?>
	|<data>
  	|	<title>"+title+"</title>
  	|	<category>"+cateory_vip+"</category>
  	|	<manager>
    |		<phone>"+phone_manager+"</phone>
  	|	</manager>
	|</data>
	|";	
    Возврат Стр;	
КонецФункции

// Создание события при входящем или исходящем вызове.
// По состоянию "ANSWER" создаем Событие безусловно.
// По состоянию "HANGUP" проверяем было ли уже по данному "uuid" создано Событие. Если нет, то создаем.
Функция СоздатьСобытие(Данные)
	
	// Тут логика по созданию События	
	
КонецФункции

Функция ПрочитатьДанные(Data)
	Перем direction, key, uuid, Пользователь, Объект;
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Data);
	Данные = ПрочитатьJSON(Чтение, Ложь);
	Чтение.Закрыть();	
	
		
	Если ЗначениеЗаполнено(key) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("Key",Key);
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("Key2",Key);
		КонецЕсли;
	КонецЕсли;
	Данные.Вставить("Пользователь",Пользователь);	
	
	Возврат Данные;
КонецФункции // ПрочитатьДанные()


#Область ПрограммныйИнтерфейс

// SayNameByINN
// По ИНН возвращает наименование контрагента в формате:
// <?xml version="1.0"?>
//	<data>
//    <title>Гидравлика-Сервис</title>
//    <category>0</category>
//    <manager>
//        <phone>246</phone>
//    </manager>
//	</data>
//В случае, если с таким ИНН несколько контрагентов, то вернет последнего(с наибольшим кодом).
//
//В случае ошибки:
//<?xml version="1.0"?>
//<error>Не указан ИНН</error>
Функция SayNameByINN(INN) Экспорт
	Если НЕ ЗначениеЗаполнено(INN) Тогда
		Возврат "<?xml version=""1.0""?>
		|<error>Не указан ИНН</error>";
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.НайтиКонтрагентаПоИНН(INN);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ПолучитьХМЛ(Контрагент.Наименование,Контрагент.КатегорияВИП,Контрагент.Куратор._ВнутреннийНомер);;	
	КонецЕсли;
	Ответ = "<?xml version=""1.0""?>
		|<error>Контрагент с ИНН "+INN+" не найден.</error>";
		Возврат Ответ;
КонецФункции

Функция GetNamesManegers() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Наименование,
		|	Контрагенты.НомерАккаунтаВАТС КАК НомерАккаунтаВАТС,
		|	Контрагенты.Куратор.Наименование,
		|	Контрагенты.КураторУдержания.Наименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.НомерАккаунтаВАТС > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерАккаунтаВАТС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Стр = "<?xml version=""1.0""?>
	|<data>";
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Стр=Стр+"
		|	<contragent>
		|		<title>"+Выборка.Наименование+"</title>
		|		<account_id>"+Выборка.НомерАккаунтаВАТС+"</account_id>
		|		<manager>
		|			<name>"+Выборка.КураторНаименование+"</name>
		|		</manager>
		|		<manager_second>
		|			<name>"+Выборка.КураторУдержанияНаименование+"</name>
		|		</manager_second>
		|	</contragent>";
	КонецЦикла;	
	Стр=Стр+"
	|</data>";
	
	Возврат Стр;
	
КонецФункции

Функция ПолучитьОповещенияПользователя() Экспорт	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВАТСоповещения.user КАК user,
	               |	ВАТСоповещения.date КАК date,
	               |	ВАТСоповещения.numFrom КАК numFrom,
	               |	ВАТСоповещения.state КАК state
	               |ИЗ
	               |	РегистрСведений.ВАТСоповещения КАК ВАТСоповещения
	               |ГДЕ
	               |	ВАТСоповещения.user = &Пользователь
	               |	И НЕ ВАТСоповещения.processed
	               |	И ВАТСоповещения.numFrom <> ""CallAPI""
	               |	И ВАТСоповещения.numFrom <> ""0000""";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	МассивДанных = Новый Массив;
	Запись = РегистрыСведений.ВАТСоповещения.СоздатьМенеджерЗаписи();
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл	
		Если Выборка.date + 2*60 > ТекущаяДата() Тогда
			//Сообщение старше 2минут, оно уже неактуально
			Стр = Новый Структура("numFrom,state");
			ЗаполнитьЗначенияСвойств(Стр,Выборка);
			МассивДанных.Добавить(Стр);		
		КонецЕсли;				
		ЗаполнитьЗначенияСвойств(Запись,Выборка);
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Обработано = Истина;		
			Запись.Записать();		 	
		КонецЕсли;	
	КонецЦикла;	
	Возврат МассивДанных;
КонецФункции

Функция SayName(Number) Экспорт
	НаименованиеСотрудника = "";
	Контрагент = ОбщегоНазначения.НайтиКонтрагентаПоНомеруТелефона(number,,НаименованиеСотрудника);
		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Наименование		= НаименованиеСотрудника +" "+Контрагент.Наименование;
		КатегорияВИП		= Контрагент.КатегорияВИП;
		ТелефонМенеджера	= Контрагент.Куратор._ВнутреннийНомер;
	Иначе
		Наименование		= "";
		КатегорияВИП		= "";
		ТелефонМенеджера	= "";
	КонецЕсли;		
	Возврат ПолучитьХМЛ(Наименование,КатегорияВИП,ТелефонМенеджера);
КонецФункции

Процедура Event(Data) Экспорт	
	Перем direction,key,uuid,Пользователь,Объект;
	
	РегистрыСведений.ВАТСЛогиЗапросов.ЗарегистрироватьСобытие(Data,"Event");
	
	Данные = ПрочитатьДанные(Data);
	
	Данные.Свойство("uuid",uuid);
	Данные.Свойство("direction",direction);
	Данные.Свойство("userkey",key);
	
	РезультатПоискаЗвонка = РегистрыСведений.ВАТСЗвонкиПоОбъекту.НайтиЗвонокПоИдентификатору(uuid);	
	РегистрироватьЗвонок = Истина;
	Если РезультатПоискаЗвонка=Неопределено Тогда
		// Такого звонка нет в базе, надо добавить		
		МенеджерЗаписи				= РегистрыСведений.ВАТСЗвонкиПоОбъекту.СоздатьМенеджерЗаписи();	
		МенеджерЗаписи.ДатаЗвонка	= ТекущаяДата();
	Иначе
		// Звонок в базе есть, надо обновить			
		МенеджерЗаписи			= РегистрыСведений.ВАТСЗвонкиПоОбъекту.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.uuid		= uuid;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			РегистрироватьЗвонок = Ложь;	
		Иначе
			Объект = РезультатПоискаЗвонка.Объект;
		КонецЕсли;	
	КонецЕсли;
	
	// При входящем или исходящем вызове создаем Событие.
	Если НЕ ЗначениеЗаполнено(Объект) 
		И (ВРег(Данные.state) = "ANSWER" ИЛИ (ВРег(Данные.state) = "HANGUP" И СтрДлина(Данные.to)>4)) Тогда//РезультатПоискаЗвонка=Неопределено ИЛИ НЕ ЗначениеЗаполнено(РезультатПоискаЗвонка.Событие) Тогда
		// Событие создаем только по статусу ANSWER или HANGUP
		// По звонку еще не создано Событие
		//Объект = СоздатьСобытие(Данные);
	КонецЕсли;
	Данные.Вставить("Объект",Объект);
	
	Если РегистрироватьЗвонок Тогда
		РегистрыСведений.ВАТСЗвонкиПоОбъекту.ЗарегистрироватьИлиОбновитьЗвонок(МенеджерЗаписи,Данные);
	КонецЕсли;
			
	Если Нрег(direction) = "incoming" И (ВРег(Данные.state) = "PREANSWER" ИЛИ ВРег(Данные.state) = "ANSWER") Тогда
		РегистрыСведений.ВАТСоповещения.ЗарегистрироватьОповещение(Данные);
	КонецЕсли;
		
КонецПроцедуры

// Предполагаем, что по объекту не более одной записи
Функция ВернутьRecordUrl(Объект) Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВАТСЗвонкиПоОбъекту.recordUrl КАК recordUrl
		|ИЗ
		|	РегистрСведений.ВАТСЗвонкиПоОбъекту КАК ВАТСЗвонкиПоОбъекту
		|ГДЕ
		|	ВАТСЗвонкиПоОбъекту.Объект = &Объект
		|";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.recordUrl;
	КонецЦикла;
	Возврат Неопределено;	
КонецФункции

Функция ПолучитьЗначениеРеквизитаОбъекта(Объект, ИмяРеквизита) Экспорт
	Возврат Объект[ИмяРеквизита];
КонецФункции

Процедура Позвонить(number, key = Неопределено, Объект = Неопределено) Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если key = Неопределено Тогда
		key = ПараметрыСеанса.ТекущийПользователь.Key;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(number) ИЛИ НЕ ЗначениеЗаполнено(key) Тогда
		Возврат;		
	КонецЕсли;
	                          
	ssl		= Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	НТТР	= Новый HTTPСоединение("callapi.services.mobilon.ru",,,,,,ssl);
	Запрос	= Новый HTTPЗапрос("/call/"+Константы.ВАТСТокенНоды.Получить()+":"+СокрЛП(key)+"/"+СокрЛП(number));
	Ответ	= НТТР.Получить(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		Сообщить("Не удалось совершить исходящий вызов. Возможно, проблема на ВАТС.");
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Данные = ПрочитатьJSON(Чтение, Ложь);
	Чтение.Закрыть();
	
	МенеджерЗаписи				= РегистрыСведений.ВАТСЗвонкиПоОбъекту.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.ДатаЗвонка	= ТекущаяДата();
	МенеджерЗаписи.Объект		= Объект;
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.НаНомер		= number;
	МенеджерЗаписи.direction	= "external";
	МенеджерЗаписи.uuid			= Данные.uuid;
	МенеджерЗаписи.recordUrl	= Данные.recordUrl;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь); 
	
 КонецПроцедуры

#КонецОбласти


